---
title: Configuration options
slug: config-options
description: >-
  Learn how to configure Vikunja using config files or environment variables.
  Discover supported formats, file locations, and default settings for optimal
  setup.
---

You can either use a `config.yml` file in the root directory of Vikunja or set almost all config option with environment variables. If you have both, the value set in the config file is used.
Right now it is not possible to configure openid authentication via environment variables.

Variables are nested in the `config.yml`, these nested variables become `VIKUNJA_FIRST_CHILD` when configuring via
environment variables. So setting

```sh
export VIKUNJA_FIRST_CHILD=true
```

is the same as defining it in a `config.yml` like so:

```yaml
first:
    child: true
```

## Formats

Vikunja supports using `toml`, `yaml`, `hcl`, `ini`, `json`, envfile, env variables and Java Properties files.
We recommend yaml or toml, but you're free to use whatever you want.

Vikunja provides a default [`config.yml`](https://dl.vikunja.io/vikunja/unstable/config.yml.sample) file which you can use as a starting point.

## Config file locations

Vikunja will search on various places for a config file:

* Next to the location of the binary
* In the `service.rootpath` location set in a config (remember you can set config arguments via environment variables)
* In `/etc/vikunja`
* In `~/.config/vikunja`

The `service.rootpath` setting is used only while finding the first config file.
You can therefore set `VIKUNJA_SERVICE_ROOTPATH` to point Vikunja to that
initial config file, but any new `service.rootpath` defined inside it will not be
considered for further config lookup.

```sh
export VIKUNJA_SERVICE_ROOTPATH=/etc/vikunja
vikunja
```

Assuming `/etc/vikunja/config.yml` contains:

```yaml
service:
  rootpath: /opt/vikunja
```

Vikunja reads `/etc/vikunja/config.yml` but does not check
`/opt/vikunja/config.yml` afterward.

### Using a config file with Docker Compose

In case you are using Docker Compose you need to edit the `docker-compose.yml` to load `config.yml`.
Mount the `config.yml` file into the Vikunja container, by adding this line to the volumes of the Vikunja container and replacing the `./path/to/config.yml` with the relative path from the `docker-compose.yml` to your `config.yml`:

```yaml
volumes:
  - ./path/to/config.yml:/etc/vikunja/config.yml
```

After all the setup is done, start Vikunja as shown in the [Docker Compose setup](/docs/full-docker-example).

## Reading config values from files

{% callout type="warning" %}
This feature has not been released yet. It is only available for testing in [unstable builds](/docs/versions#unstable).
{% /callout %}

Vikunja can read any config value from a file saved on disk when the path to that file is 
specified in the config with the target config path as child `file`.
This works with environment variables as well, note that there you'll need to add a `_FILE` suffix.

Files are evaluated after any previously set values. That means if you set both, the value from the file will override any previously set value.

If the specified file is not accessible, Vikunja will fail to start.

For example, setting this in your config.yml:

```yaml
database:
  password:
    file: /path/to/password
```

will load the content from the file at `/path/to/password` and set it as the config value of `database.password`.

With an environment variable for the same config variable, you'd need to set the `VIKUNJA_DATABASE_PASSWORD_FILE` environment variable to `/path/to/password`.

## Default configuration with explanations

The following explains all possible config variables and their defaults.
You can find a full example configuration file in [here](https://dl.vikunja.io/vikunja/unstable/config.yml.sample).

If you don't provide a value in your config file, their default will be used.

### Nesting

Most config variables are nested under some "higher-level" key.
For example, the `interface` config variable is a child of the `service` key.

The docs below aim to reflect that leveling, but please also have a look at [the default config](https://dl.vikunja.io/vikunja/unstable/config.yml.sample) file
to better grasp how the nesting looks like.

{% configOptions %}
{% /configOptions %}
